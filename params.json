{"name":"Wub.ck","body":"*Wub.ck* is a ChucK instrument developed by Ilias Karim for SLOrk, Stanford's Laptop Orchestra.\r\n\r\n# Development\r\n\r\n## Audio Synthesis Patch\r\n\r\nThe original audio synthesis patch was taken from an example demonstrated by Hongchan during the first week of class. Here is the example in full:\r\n\r\n```\r\n// ------------------------------------------------------\r\n// SLOrk 2012 tutorial: ex2\r\n//\r\n// hongchan@ccrma.stanford.edu\r\n// ------------------------------------------------------\r\n\r\n// a synth patch\r\nSawOsc s => ResonZ res => Envelope e => NRev r => dac;\r\ne => Delay d => r;\r\nd => Gain feedback => d;\r\n\r\n// setting initial parameters for UGens\r\n0.3 => s.gain;\r\n25::ms => e.duration;\r\n1::second => d.max;\r\n250::ms => d.delay;\r\n0.25 => feedback.gain;\r\n0.2 => r.mix;\r\n\r\n// a timed loop\r\nwhile ( true )\r\n{\r\n    // changing parameters\r\n    Std.rand2(2, 6) * 220 => float basefreq;\r\n    basefreq => s.freq;\r\n    basefreq * 1.2 => res.freq;\r\n    Std.rand2f(5, 12) => res.Q;\r\n    \r\n    // triggering/releasing a note\r\n    e.keyOn();\r\n    25::ms => now;\r\n    e.keyOff();\r\n    100::ms => now;\r\n}\r\n```\r\n\r\nNote: the base note frequency is much higher in this example than later.\r\n\r\n\r\n## miniAudicle User Interface (MAUI)\r\n\r\nSince it was my first time getting down and dirty with ChucK, I wanted to explore the sounds that I could synthesize. The best method to do so seemed to parameterize the entire example Hongchan had given us using MAUI (see links below). \r\n\r\n\r\n## TrackPad and Keyboard Input\r\n\r\nAfter setting proper defaults and ranges for the parameters of my instrument, I mapped play to the space bar and some of the more interesting settings to the Magic TrackPad. Keyboard support is well-documented, but my Magic TrackPad didn't work until I used this bit of ChucK which leverages a private API:\r\n\r\n```\r\nspork ~ handleMultitouch();\r\n\r\nfun void handleMultitouch()\r\n{\r\n    Hid hi;\r\n    hi.open(7, 0);\r\n    \r\n    HidMsg msg;\r\n    \r\n    while(true)\r\n    {\r\n        hi => now;\r\n        while(hi.recv(msg))\r\n        {\r\n            <<< msg.which, msg.touchX, msg.touchY, msg.touchSize >>>;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote: Depending on your setup, you may have to change ```hi.open(7, 0);``` to ```hi.open(7, 1);```  \r\nNote: Even though this code support multi-touch, at this point my instrument only supports one touch\r\n\r\n\r\n## First Performance\r\n\r\n[Video and audio capture of performance on YouTube](http://youtu.be/NiGm5fYPRqE)\r\n\r\n[Wub.ck @ 34a7f61a66dede72196972723c14f2edb95dba4b](https://raw.github.com/iliaskarim/wub.ck/34a7f61a66dede72196972723c14f2edb95dba4b/wub.ck)\r\n\r\nFor this performance, I programmed the instrument to play four notes at the MIDI note specified, followed by four notes a minor third higher, and then repeat. Each note is individually played back by space bar and played in time with two delayed triplets decaying in a feedback loop. I simultaneously adjust the parameters of each note via TrackPad using two different mappings toggled with TAB. Turn your subwoofer up for this one!\r\n\r\n### Controls:\r\n* Space - Play\r\n* Tab - Alter TrackPad mapping:\r\n* 1. Manual mouse control\r\n* 2. Feedback gain (y) / delay duration (x)\r\n* 3.  Resonance Q parameter (y) /  Resonance frequency scale (x)\r\n\r\n## Resources & Links\r\n* [miniAudicle](http://audicle.cs.princeton.edu/mini/mac/)  \r\n* [ChucK Programming Guide: Unit Generators](http://chuck.cs.princeton.edu/doc/program/ugen.html)  \r\n* [ChucK Examples](http://chuck.cs.princeton.edu/doc/examples/)  \r\n* [miniAudicle User Interface Elements API](http://audicle.cs.princeton.edu/mini/mac/doc/maui_api.html)  \r\n* [Notes on ChucK for Music](http://www.dtic.upf.edu/~gcoleman/chuck/tutorial/tutorial.html)   ","tagline":"ChucK Bass Weapon","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}